{"version":3,"sources":["components/Task.jsx","App.jsx","index.js"],"names":["Task","props","task","key","deleteTask","delete","completeTask","complete","style","alignItems","justifyContent","className","marginLeft","onClick","color","size","App","useState","currentTask","setCurrentTask","taskArray","seTaskArray","completedTasks","setCompletedTasks","handleDelete","index","newTaskArray","splice","handleComplete","value","type","onChange","e","target","placeholder","map","href","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iNAoCeA,EAjCF,SAACC,GAEV,IAAMC,EAAOD,EAAMC,KACbC,EAAMF,EAAME,IACZC,EAAaH,EAAMI,OACnBC,EAAeL,EAAMM,SAE3B,OACI,0CAaI,sBAAKC,MAAS,CAACC,WAAY,SAAUC,eAAgB,gBAAgBC,UAAU,wBAA/E,cACI,oBAAIH,MAAS,CAACI,WAAY,OAA1B,SAAmCV,IADvC,IAEI,uBACA,sBAAKS,UAAY,UAAjB,UACI,qBAAKE,QAAW,kBAAIP,EAAaH,IAAKK,MAAS,CAACM,MAAO,SAAWH,UAAY,sBAA9E,SAAoG,cAAC,IAAD,CAAWI,KAAQ,OAD3H,KAEI,qBAAKF,QAAW,kBAAMT,EAAWD,IAAMK,MAAS,CAACM,MAAO,OAAQH,UAAY,sBAA5E,SAAkG,cAAC,IAAD,CAASI,KAAQ,OAFvH,eC+CDC,EArEH,WAKV,MAAsCC,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAiCF,mBAAS,IAA1C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAA4CJ,mBAAS,GAArD,mBAAOK,EAAP,KAAuBC,EAAvB,KASMC,EAAe,SAACC,GACpB,IAAMC,EAAY,YAAON,GACzBM,EAAaC,OAAOF,EAAO,GAC3BJ,EAAYK,IAGRE,EAAiB,SAACH,GACtBF,EAAkBD,EAAiB,GACnCE,EAAaC,IAGf,OAmBE,cAlBA,CAkBA,OAAKd,UAAU,kCAAf,cACE,sBAAKA,UAAY,8BAAjB,cACI,4CACA,sBAAKA,UAAY,wBAAjB,UACE,sBAAKA,UAAY,wBAAjB,cACI,gCACE,uBAAOkB,MAASX,EAAaY,KAAK,OAAOC,SAAY,SAACC,GAAD,OAAKb,EAAea,EAAEC,OAAOJ,QAAOK,YAAY,eACrG,wBAAQrB,QA5CN,WACG,KAAhBK,IACDG,EAAY,GAAD,mBAAKD,GAAL,CAAgBF,KAC3BC,EAAe,MAyCH,0BAGN,uBAEEC,EAAUe,KAAI,SAACjC,EAAMuB,GACnB,OAAO,cAAC,EAAD,CAAMvB,KAAQA,EAAoBG,OAAUmB,EAAcjB,SAAYqB,GAA3CH,MAGtC,yBAAQd,UAAY,wBAApB,UAA4C,mDAAqB,sBAAMH,MAAS,CAACM,MAAO,SAAvB,SAAkCQ,OAA2B,wBAAQc,KAAO,2FAA2FH,OAAS,SAAStB,UAAY,eAAxI,yCC5D1I0B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.e2aa8612.chunk.js","sourcesContent":["import {BsCheckLg} from 'react-icons/bs'\r\nimport {ImCross} from 'react-icons/im'\r\n//this is a component that takes in the task and displays it\r\nconst Task = (props) => {\r\n\r\n    const task = props.task\r\n    const key = props.key\r\n    const deleteTask = props.delete\r\n    const completeTask = props.complete //props are just parameters that are passed in from the parent component (in this current situaiton the App component)\r\n\r\n    return ( \r\n        <>  {/*this is jsx*/}\r\n\r\n            {/*\r\n            \r\n                inline css is done like this with a style attribute taking in an object of styles. The css attributes are camelCaed in react instead of seperated by a dash\r\n                \r\n                for example:\r\n\r\n                    Vanilla CSS -> font-size: 20px;\r\n                    React inline css -> fontSize: 20px;\r\n            \r\n            */}\r\n            \r\n            <div style = {{alignItems: 'center', justifyContent: 'space-around'}}className='taskContainer flexbox'> {/*This is the container for the task*/}\r\n                <h3 style = {{marginLeft: '1vw'}}>{task}</h3> {/*This is the task*/}\r\n                <br/>\r\n                <div className = 'flexbox'>\r\n                    <div onClick = {()=>completeTask(key)}style = {{color: 'green' }} className = 'icon flexbox center'><BsCheckLg size = {15}/></div>  {/*This is the complete button*/}\r\n                    <div onClick = {() => deleteTask(key)} style = {{color: 'red' }}className = 'icon flexbox center'><ImCross size = {15}/></div>  {/*This is the delete button*/}\r\n                </div>\r\n            </div>\r\n        </>\r\n     );\r\n}\r\n \r\nexport default Task;","\nimport Task from './components/Task.jsx' //importing the task component\n\nimport {useState} from 'react'//react 'hook' to help us manage state on the webpage\n\nconst App = ()=> { //javascrpt function to handle the app of the whole page\n\n\n  //State is a plain JavaScript object used by React to represent an information about the component's current situation\n\n  const [currentTask, setCurrentTask] = useState('')//setting state of current task thats in the input feild\n  const [taskArray, seTaskArray] = useState([])//setting state of taskArray to an empty array\n  const [completedTasks, setCompletedTasks] = useState(0)//setting state of completedTasks to an empty array\n\n  const handleAdd = () => {//javascrpt function to handle the add tasks\n    if(currentTask !== ''){\n      seTaskArray([...taskArray, currentTask]) //sets the state of the task array to have all the previous array items and the new task \n      setCurrentTask('')//restes test input field to be blank\n    }\n  }\n\n  const handleDelete = (index) => {//javascrpt function to handle the delete tasks\n    const newTaskArray = [...taskArray]//removes the item from the array by copying the array and removing the item at index you want to delet\n    newTaskArray.splice(index, 1)\n    seTaskArray(newTaskArray)//sets the current array to the spliced one\n  }\n\n  const handleComplete = (index) => { //javascrpt function to handle the complete tasks\n    setCompletedTasks(completedTasks + 1);//adds one to the completed tasks counter\n    handleDelete(index);//also deletes the task bc its completed\n  }\n\n  return (\n    //this is jsx; inside the html javascirpt can be used if covered by a {} task\n\n\n    /* For example if I want to use show static javascript expression inside an h1 I would:\n\n      const ExampleJXS = () => {\n\n        const title = 'Hello World'\n\n        return (\n          <h1>{title}</h1>\n        )\n      }\n\n      this is much better than setting an id to the h1 and using innerHTML = 'Hello World'\n\n    */\n\n    <div className='container flexbox column center'> {/* This is the overall grey container*/}\n      <div className = 'todoListBody flexbox column'> {/* This is the overall white container*/}\n          <h1>To Do List</h1>{/*Title*/}\n          <div className = 'flexbox column center'>\n            <div className = 'flexbox column center'> {/* This is the overall adding form input*/}\n                <div>\n                  <input value = {currentTask} type='text' onChange = {(e)=>setCurrentTask(e.target.value)}placeholder='Add a task' />{/*Form to take in inputs. onChange function runs every tim teh input feild is changed*/}\n                  <button onClick = {handleAdd}>Create</button>{/*Button to add the task*/}\n                </div>\n            </div>\n            <br />\n            {\n              taskArray.map((task, index)=>{ /*This is the map function that takes in the taskArray and maps it to the task*/\n                return <Task task = {task} key = {index} delete = {handleDelete} complete = {handleComplete}/>//custom component that takes in the task and displays it; passes in all functions as well as values\n              })\n            }\n            <footer className = 'flexbox column center'><h3>Completed Tasks: <span style = {{color: 'green'}}>{completedTasks}</span></h3><button href = 'https://docs.google.com/presentation/d/1IOKMgyK5e9dWAdgxa0mcnN57eh7Li-Kdm5D-mzUBM9A/view' target = '_blank' className = \"buttonSlides\">Link to slides</button></footer>{/*Footer that has state of completed tasks which updates in task.java*/}\n          </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App; //exports app to be used in index.js\n\n//app is really just a master component usually called a container component and composes other components\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n//all imports go here\n\nReactDOM.render(//this renders app using the virtual dom\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')//adds to html in index.html as a single div!\n);\n\n\n"],"sourceRoot":""}